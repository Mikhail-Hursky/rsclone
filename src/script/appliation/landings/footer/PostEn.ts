const postEn = {
  title: '<h3>OMG – Oh, My Games or a series of games "Tetris"</h3><ul class="article-authors"><li>Gursky Mikhail,</li><li>Fedorovich Pavel,</li><li>Migacheva Marina,</li></ul><p class="article-data">January, 2021</p>',
  nav: '<ul><li><a href="#foreword">Foreword</a></li><li><a href="#description">Description of the project</a></li><li><a href="#teamwork">Organization of teamwork</a></li><li><a href="#architecture">Project architecture. Features of the implementation</a></li><li><a href="#progress">Development progress</a></li><li><a href="#conclusion">Conclusion</a></li></ul>',

  foreword: '<h4>Foreword</h4><p>It so happened that we ended up with the same mentor, crossed paths during the study on various issues and decided to perform this task together. We all were on these courses for the first time and the goal of training for each of us is similar – to find ourselves in front-end development, to improve skills, participate in interesting projects and get a dream job.</p><p>Of the difficulties, the main one can be called – a large amount of information in a short time. On team projects it was more interesting, there was support and insurance from the team, it was possible to jointly discuss and solve many issues, share experience and receive it in return, the strengths of each of the team allowed us to make the project better.</p>',

  descriptionTitle: '<h4>Description of the project</h4>',
  descriptionItemOne: '<h5>What is the point</h5><p>Surely the word "Tetris" evokes in many nostalgic memories of the good old days, which were filled with characteristic music and pixel graphics. Cancel everything, reschedule appointments - today we\'re going to talk about creating a series of Tetris games that you can play in the browser and spend a whole day on.</p><p>The very idea: to create a version of the game for the browser, which would include several "nostalgic" games, the ability to save the results and access to statistics.</p>  <p>In the beginning, sketching the idea did not raise any concerns - it was necessary to describe the logic, draw the interface and connect them.  It didn\'t look too complicated, but when we sat down to discuss the details, the list was quite impressive.</p><p>Result:</p><ul class="list"><li> - the working interface consists of several modules, some of them are available for any user, game modules and access to statistics are available only after authorization;</li><li> - the play area offers a choice of 6 games (Tetris, Race, Snake, Breackout, Space-attack, Flappy-bird, Snow);</li><li> - after authorization, additional information and the ability to play become available to the user;</li></ul>',
  descriptionItemTwo: '<h5>Main features and the process of their implementation</h5><p>For the project, the following important points were identified and implemented in accordance with the terms of the assignment:</p><p><strong>UI block</strong></p><ul class="list"><li>1.	Control of the game from the keyboard - control of game elements is implemented through the keyboard. For example, in the game "Tetris" control the movement of the figure through displacement to the left, right, accelerate the fall, turn, in the game "Race" the displacement of the car when moving to the left and right, in the game "Snake" change the direction of movement of the snake - up, down, left , to the right, change the direction of movement to the opposite, etc.</li><li>2. Animations are implemented, for the creation of which key frames are used - these are animations for the preloader, for the logo, for small elements in the interface.</li><li>3. The application is made in the same style - prototyping is done, colors are defined, fonts are selected, general styles are drawn for working game elements displayed on the canvas, individual author\'s graphic elements are drawn and ready-made ones are added that correspond to the general concept.</li><li>4.The application works on a phone / tablet / PC - adaptive solutions for common interface elements have been implemented, solutions for a game element have been written, allowing it to function on the listed devices.</li></ul><p><strong>Game work</strong></p><ul class="list"><li>5. The object of the game allows you to select one of the available pages without reloading, the action of the selected game takes place at different levels, for each game its own game environment has been thought out and created, the scores and / or health for some players are recorded. The games are endless logically, in case of defeat, a general scene is worked out, which allows you to either restart the current game, or go to the game menu.</li><li>6. There are statistics that display the progress of the game - the number of points scored and / or health.</li><li>7. The game has worked out "physics" - "falling" elements, physics of collision and rebound.</li><li>8. Logic for a computer adversary is written - the generation of objects, collision with which leads to defeat, the generation and movement of objects that need to be "intercepted", an increase in complexity for a computer opponent with increasing levels of the game.</li></ul><p><strong>Tech stack</strong></p><ul class="list"><li>9. Used Canvas, Phaser - the game was created on canvas, offers several game scenes for selection</li><li>10. Working with Audio API - in game scenes, sounds are provided when a situation occurs - falling, collision, defeat, "shot"; also, before starting the game, the user has the option to turn off the soundtrack of the game.</li><li>11. Used webpack.</li><li>12. A series of games and the assembly of the structure within the project is written in TypeScript.</li></ul><p><strong>Working with code</strong></p><ul class="list"><li>13. Used eslint, eslint-config-airbnb-base.</li><li>14. Clear, readable code. Function and function names reflect what they contain (what they do). The function performs one action. Repetition of logic is minimized.</li></ul><p><strong>Back-end</strong></p><ul class="list"><li>15. Used RESTful API.</li><li>16. Connecting and working with the database - MongoDB.</li><li>17. Authentication - GitHub</li><li>18. The application displays statistics and data that it receives from the backend - data about an authorized user, game results.</li><li>19. Implemented nodejs and express, gives correct responses, gives HTTP errors with normal body, by which you can understand what happened</li></ul>',
  descriptionItemThree: '<h5>Interface screenshots</h5><p>Were designed and created:</p><ul class="list"><li> - interface variant before authorization;</li><li> - interface option after authorization;</li><li> - a variant of the interface for the playing field;</li><li> - options for various devices.</li></ul><p>Interface before authorization on various devices:</p>',
  descriptionItemThree2: '<p>The interface after authorization on various devices:</p>',
  descriptionItemThree3: '<p>Including changes when opened on mobile</p>',
  descriptionItemThree4: '<p>A full screen option is provided for the playing field</p>',
  descriptionItemThree5: '<p>The game board interface includes a start menu and sound controls, game scenes for each of the six games (Tetris, Race, Space Attack, Rip, Flappy-bird, Snake, Snow), an end-of-game scene, and the ability to return to the game or select another , the ability to pause the game. Playing field options for different scenes</p>',
  descriptionItemThree6: '<p>Demo – you can check out a short video review of the game here.</p>',

  teamWorkTitle: '<h4>Organization of team work</h4>',
  teamWorkItemOne: '<h5>How team activities were coordinated</h5><p>Team leader Mikhail Gursky was recognized as the leader in terms of points and, in general, he is a positive and responsible person.</p><p>For us, the important criteria were dedication, communication, planning, teamwork, synergy (1 + 1 + 1 = 5). Synergy is the summing effect of the interaction of two or more people, characterized by the fact that their action significantly exceeds the effect of each individual person. The knowledge and efforts of several people can be organized in such a way that they are mutually reinforced. "The whole is greater than the sum of the individual parts" (Aristotle).</p><p>For each team member, tasks were defined, and everyone knows what to expect from each. We tried to complement each other, sometimes exchanging or intersecting within one subtask. The activities were coordinated by the team lead. Everyone helps each other. The initiative and sense of responsibility of all team members was maintained.</p><p>For ourselves, we have identified the key principles of teamwork: interaction and discussion, positive attitude; constructive criticism; solution-oriented communication.</p>',
  teamWorkItemTwo: '<h5>Collaboration tools</h5><p><strong>GitHub, Git</strong> - it is a collaborative work on a project based on the capabilities of these resources.</p><p><strong>Figma</strong> - joint work on prototyping / design of the project and its elements.</p><p><strong>Trello</strong> - it is one of the popular online project management systems, which is in particular demand among small companies and start-ups - which suits our situation. It allows you to effectively organize work according to the Japanese methodology of kanban boards - it\'s better to google it =)</p><p><strong>Zoom, Skype</strong> - options for calling together, demonstrating code, discussing ideas and solutions.</p><p><strong>Telegram</strong> - for current work moments that do not require a long discussion or any other technical features, and to maintain the team\'s mood, which is also important</p>',
  teamWorkItemThree: '<h5>What were the difficulties and how they were solved</h5><p>We were not completely strangers who fell into the same team, so the period of acquaintance and adaptation passed unnoticed. We easily found a common language, views on working moments and other important things for joint work coincided, and what did not coincide was discussed and closed without problems. We actively communicated, maintained constant communication during the development process, helped each other with mistakes, shared interesting things, and also for other reasons.</p>',

  architectureTitle: '<h4>Project architecture. Features of the implementation</h4>',
  architectureItemOne: '<h5>Description of libraries, frameworks, technologies that were involved in the development of the application, motivation for use, advantages and disadvantages</h5><ul class="list"><li>1.	We use <strong>Trello</strong> - we lead and track the development process.<p>Trello is one of the popular online project management systems, which is in particular demand among small companies and startups - which suits our situation. It allows you to effectively organize work according to the Japanese methodology of kanban boards - it\'s better to google it =)</p></li><li>2.	<strong>Phaser</strong> and <strong>TypeScript</strong> - for creating game logic.<p>Phaser Game Engine is a cross-browser HTML5 platform for building browser-based games using WebGL and Canvas.</p><p>TypeScript is a programming language introduced by Microsoft in 2012 and marketed as a web application development tool that extends JavaScript. As many have pointed out, the main benefit is an easier transition from the world of strong typing than directly to JavaScript ... but what if you\'re already in love with JavaScript, and all of its madness is yours? - not whine, but write code in Type Script)</p></li><li>3.	<strong>Node.js, MongoDB, Express, TypeScript</strong> – for server solutions. Well, it was pretty slippery here, but we got through.<p>Node.js is a V8-based programming framework that transforms JavaScript from a highly specialized language to a general-purpose language.</p><p>MongoDB is a document oriented database management system that does not require a table schema description (have you heard of 3NF?). It is considered one of the classic examples of NoSQL systems and uses documents like JSON.</p><p>Together they will allow you to store and return data on demand during user authorization and after.</p><p>Express is a Node.js framework that provides a set of features for mobile and web applications.</p></li><li>4.	<strong>HTML, CSS, SASS, JS</strong> – for interface.<p>HTML will allow you to form the main frame of the interface and the area for displaying the playing field.</p><p>CSS - used to style elements in accordance with the established graphic concept of the project, including adaptive.</p><p>SASS is a preprocessor that will allow you to automate certain points in the formation of project style decisions.</p><p>JS - individual interface modules will be filled with content after user authorization or when choosing one of the games, a set of js solutions is assumed to form the DOM after certain events in the project.</p></li><li>5.	<strong>Webpack</strong> – to build solutions.<p>Webpack - allows you to build a project, including compiling solutions in .ts and .scss files. It will allow you to work not only with the front-end, but also in the back-end development on Node.js.</p></li><li>6.	<strong>Figma</strong> and <strong>app.moqups</strong> - for creating design elements and prototyping.</li><li>7.	<strong>ESLint</strong> – to check the code.</li><li>8.	<strong>Git</strong> and <strong>GitHub</strong> – version control system and storage of project files.</li></ul>',

  architectureItemTwoTitle: '<h5>Project architecture</h5>',
  architectureItemTwo1: '<p><strong>Designing general logic</strong></p><p>The key element for the game will be canvas - a canvas on which you can draw using JS commands. It can be used to create animated backgrounds, various constructors and, most importantly in our case, games. The playing field has a set of buttons for choosing a game, the playing field of the selected game will be loaded into it, an option for restarting and going to the main menu. Communication is implemented on the basis of scenes.</p><p>The interface will contain areas with permanent content - page header, footer, modal window for authorization, expandable module for reading the article on the project. As well as areas for displaying information received upon request after user authorization - information on the user, on statistics, on games. This content will be generated when appropriate events occur and added to the DOM.</p>',
  architectureItemTwo2: '<p>User authorization is tied to a GitHub account. A query to the database after user authorization will return an object with data, on the basis of which information corresponding to the authorized user and available statistics will be loaded into the interface.</p>',
  architectureItemTwo3: '<p><strong>Designing game logic</strong></p><p>The game board allows you to select and download one of six available games. Individual elements of the games will differ (such as the plot, game objects, transition algorithms and conditions for moving to new levels). Some characteristics and algorithms will be common - the size of the playing field, the formation of graphic elements of the scene, the scene of the end of the game, the logic of the transition between the available scenes.</p>',
  architectureItemTwo4: '<p>For the user, information has been prepared for each game that will be displayed in the interface - what the game is about, how to play, conditions for switching between levels, victory conditions, controls.</p>',
  architectureItemTwo5: '<p><strong>Server solutions design</strong></p><p>Content sharing will be tied to authorization. Authorization is implemented through the user\'s github account. After authorization, game content becomes available.</p>',
  architectureItemTwo6: '<p>RESTful API developed. GitHub was used for authorization. The implementation algorithm is as follows: after the user clicks the button for authorization, authorization on GitHub takes place. GitHub returns data to the back-end. The back-end returns data to the page.</p><p>When GitHub returns data, MongoDB uses the ID to determine if there is such a user. If not, then creates and returns a new created account, if there is a user, then returns his profile with points.</p>',
  architectureItemTwo7: '<p><strong>Project structure</strong></p><p>The logic of task distribution, storage and assembly of modules is defined.</p>',
  architectureItemTwo8: '<p>Assets – storage of auxiliary elements (sound, graphics, fonts, icons)</p><p>Script – includes a set of game and application solutions</p><p>Styles – storage of style files (.scss)</p><p>Api – server solutions</p><p>Games – technical solutions for each of the games, as well as common components for the playing field</p><p>For example, the solutions for the menu on the playing field are the formation of the main menu of the game (MainMenu.ts and CustomButton.ts), the solution for pause during the game (PauseMenu.ts). Also solutions for finishing the game scene (GameOver.ts), describe the logic of loading media elements for games of the application (Preload.ts), a singleton class that stores the user state (Memory.ts) and some others.</p>',
  architectureItemTwo9: '<p>Landing contains solutions for the formation of interface elements and their assembly and processing. For example, to form the structural components of the resource header (Header.ts, Login.ts, Logo.ts). To form the elements of the main block (Game.ts, Main.ts, CurrentGame.ts, Statistic.ts). To form footer elements (Footer.ts, Article.ts). As well as service solutions for creating opportunities for the formation of DOM nodes, adding them to the structure and preparing the necessary working attributes for the implementation of processing algorithms (Tools.ts, ElementBuilder.ts).</p>',


  architectureItemThree: '<h5>The most difficult and interesting solved technical problems</h5><ul class="list"><li>1.	Authorization via GitHub - "Remember - for requests for github you need to write in small letters through _" © team lead (from team lead messages).</li><li>2.	Learn Type Script in the process of writing code - for everyone in the team, this was the first practice of writing code in Type Script.</li><li>3.	Understand the work of Phaser - the documentation is in English, there are a lot of methods, like all sorts of features, everyone had to swim in this, but in the end successfully.</li><li>4.	Assembling the game interface - on one canvas object, implement an exit to the available list of games, starting the selected game, ending the game, restarting the current game or returning to the starting game menu.</li><li>5.	Formation of common components and organization of their interaction - the Preload class, solutions for CustomButton.ts, MainMenu.ts, Singleton class for storing the user state, general logic for completing games and other elements. </li><li>6.	Formation of modules and solutions for assembling elements of the general user interface.</li><li>7.	Game logic – Tetris, Race, Snake, Breakout, SpaceAttack, FlappyBird, Adventure.</li></ul><p><strong>You can see the implementation features of the listed solutions on the project\'s GitHub account – link</strong></p>',

  progressTitle: '<h4>Development progress</h4>',
  progressItemOne: '<h5>Contribution of each team member</h5><p>Gursky Mikhail – team lead.</p><p>Organization of the starting block of solutions for the project, creating elements for the general logic of the game (formation of the playing field, logic of the completion of games, a singleton class for storing the user state, a class for the logic of loading media elements, etc.); game "Race", prototyping and creation of design elements, server solutions (RESTful, connecting and working with a database, authentication, displaying data that comes from the backend), creating a presentation, code review.</p><p>Fedorovich Pavel – developer.</p><p>Games "Tetris", "Breackout", "Space-attack", "Flappy-bird", prototyping and creation of design elements, creation of interface structure elements and adding functionality to interface elements, writing style solutions, creating a presentation, code review.</p><p>Migacheva Marina – developer.</p><p>Games "Snake", "Snow", prototyping and creation of design elements, writing adaptive solutions, creating elements of the interface structure, writing an article and translating into other languages (Belarusian, English), creating a presentation, code review. </p>',
  progressItemTwo: '<h5>Screenshot with commit history or changelog</h5>',
  progressItemThree: '<h5>Screenshot from Insight / Contributors tab on GitHub</h5>',
  progressItemFour: '<h5>Quality control assurance</h5><p>To ensure the quality of the code, we used the Continuous Integration processes in the team: versioning, testing, code review.</p><ul class="list"><li>1.	Determine the requirements for the code and general logic.</li><li>2.	Compliance with the DRY principle (Don’t repeat yourself) in development.</li><li>3.	Compliance with the KISS (keep it short simple).</li><li>4.	Used a version control system to create branches and versions of the project.<li><li>5.	When one of us finished the task, the other of us analyzed the resulting code, focusing on the following questions: whether there are obvious logical errors in the code, whether the code meets the requirements that we defined for the project, whether there is an option to improve the solution. Since we created branches for our tasks, the code was checked before the solution was merged with the develop branch, which minimized the possibility of errors in the code getting into the main development branch.</li><li>6.	The solution was designed and created on stand-alone modules, which made it possible to test it when closing one block of tasks and to exclude the "propagation" of errors.</li><li>7.	Used ESLint.</li></ul>',

  conclusionTitle: '<h4>Conclusion</h4>',
  conclusionItemOne: '<p>The complete code is available here</p><p>As a result, it is good to carry out self-analysis and analysis of what and how it turned out, which is what we did. It is worth noting that in addition to stress and lack of sleep, there were many positive things - you can add TypeScript and Phaser to the list of skills, another interesting project in your luggage, a new set of mistakes that you’ll hardly repeat, read and discussed a lot of useful things, teamwork experience and generally positive points.</p><p>A little introspection:</p><p>«Yes, I\'m generally a dream, not a team lead ... but you still need to remember that for requests to github you need to use small letters and through _, this is very important» © Mikhail</p><p>«Write something yourself (refers to Marina) on this topic, I trust you, and I\'ll go update one more “easy feature” in the game» © Pavel</p><p>«If we are talking about difficulties, then this is the word "easy" from Pasha as a special offer. Misha would have done it without us. But we still made a dream team» © Marina</p><p>In general, it turned out very positively, there are ideas for the next version, and now ... go play.</p>'
};

export default postEn;
